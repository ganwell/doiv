#!/usr/bin/env python3

import os
import sys
from contextlib import contextmanager
from pathlib import Path
from shlex import split as s

import sh

base = Path(".").absolute()
base_git = Path(base, ".git")
base_build = Path(base, "build")
base_void = Path(base_build, "void-packages")
srcpkgs = Path(base_void, "srcpkgs")
known_flags = {
    "test": "test podman",
    "help": "show this",
    "clean": "clean-up repository",
    "run": "print run command",
}


@contextmanager
def chdir(path):
    prev_cwd = Path.cwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(prev_cwd)


def help():
    for key in known_flags.keys():
        print(f"{key:10s}: {known_flags[key]}")


def init():
    class Commands:
        podman = sh.podman
        build = podman.bake("build", ".")
        build(_out=sys.stdout)
        container = build("-q").strip()
        run = podman.bake(
            "run",
            "-ti",
            "--rm",
            "--init",
            f"-eTERM={os.environ['TERM']}",
            f"-v{base_git}:/data",
            f"-v{base_build}:/home/build:U",
            container,
            _out=sys.stdout,
        )
        xbps_src = run.bake("xbps-src")
        pkg = xbps_src.pkg
        fetch = xbps_src.fetch
        extract = xbps_src.extract
        unshare = podman.unshare
        git = run.git

    return Commands


def clean(cmd):
    with chdir(base_void):
        sh.git.push("--all", f"file://{base_git}")
        sh.git.push("--tags", f"file://{base_git}")
    cmd.unshare(*s("rm -rf build/"))


def test(cmd):
    cmd.run(*s("touch huhu"))


def prepare(cmd):
    base_build.mkdir(parents=True, exist_ok=True)
    cmd.git.clone("--shared", "-b", "packages/master", "/data", "void-packages")
    cmd.xbps_src("binary-bootstrap")


def fetch(cmd):
    i = 0
    for pkg in srcpkgs.iterdir():
        i += 1
        cmd.extract(pkg)
        if i > 1000:
            break


def main(flags):
    if "help" in flags:
        return help()
    cmd = init()
    if "test" in flags:
        return test(cmd)
    if "run" in flags:
        print(cmd.run)
        return
    if "clean" in flags:
        clean(cmd)
    if not base_void.exists():
        prepare(cmd)
    if "fetch" in flags:
        fetch(cmd)


if __name__ == "__main__":
    main(set(sys.argv[1:]))
